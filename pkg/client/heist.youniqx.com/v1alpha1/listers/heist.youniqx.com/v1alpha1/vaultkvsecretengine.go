/*
Copyright 2022 youniqx Identity AG.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/youniqx/heist/pkg/apis/heist.youniqx.com/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// VaultKVSecretEngineLister helps list VaultKVSecretEngines.
// All objects returned here must be treated as read-only.
type VaultKVSecretEngineLister interface {
	// List lists all VaultKVSecretEngines in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.VaultKVSecretEngine, err error)
	// VaultKVSecretEngines returns an object that can list and get VaultKVSecretEngines.
	VaultKVSecretEngines(namespace string) VaultKVSecretEngineNamespaceLister
	VaultKVSecretEngineListerExpansion
}

// vaultKVSecretEngineLister implements the VaultKVSecretEngineLister interface.
type vaultKVSecretEngineLister struct {
	indexer cache.Indexer
}

// NewVaultKVSecretEngineLister returns a new VaultKVSecretEngineLister.
func NewVaultKVSecretEngineLister(indexer cache.Indexer) VaultKVSecretEngineLister {
	return &vaultKVSecretEngineLister{indexer: indexer}
}

// List lists all VaultKVSecretEngines in the indexer.
func (s *vaultKVSecretEngineLister) List(selector labels.Selector) (ret []*v1alpha1.VaultKVSecretEngine, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.VaultKVSecretEngine))
	})
	return ret, err
}

// VaultKVSecretEngines returns an object that can list and get VaultKVSecretEngines.
func (s *vaultKVSecretEngineLister) VaultKVSecretEngines(namespace string) VaultKVSecretEngineNamespaceLister {
	return vaultKVSecretEngineNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// VaultKVSecretEngineNamespaceLister helps list and get VaultKVSecretEngines.
// All objects returned here must be treated as read-only.
type VaultKVSecretEngineNamespaceLister interface {
	// List lists all VaultKVSecretEngines in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.VaultKVSecretEngine, err error)
	// Get retrieves the VaultKVSecretEngine from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.VaultKVSecretEngine, error)
	VaultKVSecretEngineNamespaceListerExpansion
}

// vaultKVSecretEngineNamespaceLister implements the VaultKVSecretEngineNamespaceLister
// interface.
type vaultKVSecretEngineNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all VaultKVSecretEngines in the indexer for a given namespace.
func (s vaultKVSecretEngineNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.VaultKVSecretEngine, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.VaultKVSecretEngine))
	})
	return ret, err
}

// Get retrieves the VaultKVSecretEngine from the indexer for a given namespace and name.
func (s vaultKVSecretEngineNamespaceLister) Get(name string) (*v1alpha1.VaultKVSecretEngine, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("vaultkvsecretengine"), name)
	}
	return obj.(*v1alpha1.VaultKVSecretEngine), nil
}
