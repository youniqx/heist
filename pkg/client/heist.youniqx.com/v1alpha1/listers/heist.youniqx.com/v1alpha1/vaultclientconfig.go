/*
Copyright 2022 youniqx Identity AG.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/youniqx/heist/pkg/apis/heist.youniqx.com/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// VaultClientConfigLister helps list VaultClientConfigs.
// All objects returned here must be treated as read-only.
type VaultClientConfigLister interface {
	// List lists all VaultClientConfigs in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.VaultClientConfig, err error)
	// VaultClientConfigs returns an object that can list and get VaultClientConfigs.
	VaultClientConfigs(namespace string) VaultClientConfigNamespaceLister
	VaultClientConfigListerExpansion
}

// vaultClientConfigLister implements the VaultClientConfigLister interface.
type vaultClientConfigLister struct {
	indexer cache.Indexer
}

// NewVaultClientConfigLister returns a new VaultClientConfigLister.
func NewVaultClientConfigLister(indexer cache.Indexer) VaultClientConfigLister {
	return &vaultClientConfigLister{indexer: indexer}
}

// List lists all VaultClientConfigs in the indexer.
func (s *vaultClientConfigLister) List(selector labels.Selector) (ret []*v1alpha1.VaultClientConfig, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.VaultClientConfig))
	})
	return ret, err
}

// VaultClientConfigs returns an object that can list and get VaultClientConfigs.
func (s *vaultClientConfigLister) VaultClientConfigs(namespace string) VaultClientConfigNamespaceLister {
	return vaultClientConfigNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// VaultClientConfigNamespaceLister helps list and get VaultClientConfigs.
// All objects returned here must be treated as read-only.
type VaultClientConfigNamespaceLister interface {
	// List lists all VaultClientConfigs in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.VaultClientConfig, err error)
	// Get retrieves the VaultClientConfig from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.VaultClientConfig, error)
	VaultClientConfigNamespaceListerExpansion
}

// vaultClientConfigNamespaceLister implements the VaultClientConfigNamespaceLister
// interface.
type vaultClientConfigNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all VaultClientConfigs in the indexer for a given namespace.
func (s vaultClientConfigNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.VaultClientConfig, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.VaultClientConfig))
	})
	return ret, err
}

// Get retrieves the VaultClientConfig from the indexer for a given namespace and name.
func (s vaultClientConfigNamespaceLister) Get(name string) (*v1alpha1.VaultClientConfig, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("vaultclientconfig"), name)
	}
	return obj.(*v1alpha1.VaultClientConfig), nil
}
