/*
Copyright 2022 youniqx Identity AG.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/youniqx/heist/pkg/apis/heist.youniqx.com/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// VaultTransitKeyLister helps list VaultTransitKeys.
// All objects returned here must be treated as read-only.
type VaultTransitKeyLister interface {
	// List lists all VaultTransitKeys in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.VaultTransitKey, err error)
	// VaultTransitKeys returns an object that can list and get VaultTransitKeys.
	VaultTransitKeys(namespace string) VaultTransitKeyNamespaceLister
	VaultTransitKeyListerExpansion
}

// vaultTransitKeyLister implements the VaultTransitKeyLister interface.
type vaultTransitKeyLister struct {
	indexer cache.Indexer
}

// NewVaultTransitKeyLister returns a new VaultTransitKeyLister.
func NewVaultTransitKeyLister(indexer cache.Indexer) VaultTransitKeyLister {
	return &vaultTransitKeyLister{indexer: indexer}
}

// List lists all VaultTransitKeys in the indexer.
func (s *vaultTransitKeyLister) List(selector labels.Selector) (ret []*v1alpha1.VaultTransitKey, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.VaultTransitKey))
	})
	return ret, err
}

// VaultTransitKeys returns an object that can list and get VaultTransitKeys.
func (s *vaultTransitKeyLister) VaultTransitKeys(namespace string) VaultTransitKeyNamespaceLister {
	return vaultTransitKeyNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// VaultTransitKeyNamespaceLister helps list and get VaultTransitKeys.
// All objects returned here must be treated as read-only.
type VaultTransitKeyNamespaceLister interface {
	// List lists all VaultTransitKeys in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.VaultTransitKey, err error)
	// Get retrieves the VaultTransitKey from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.VaultTransitKey, error)
	VaultTransitKeyNamespaceListerExpansion
}

// vaultTransitKeyNamespaceLister implements the VaultTransitKeyNamespaceLister
// interface.
type vaultTransitKeyNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all VaultTransitKeys in the indexer for a given namespace.
func (s vaultTransitKeyNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.VaultTransitKey, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.VaultTransitKey))
	})
	return ret, err
}

// Get retrieves the VaultTransitKey from the indexer for a given namespace and name.
func (s vaultTransitKeyNamespaceLister) Get(name string) (*v1alpha1.VaultTransitKey, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("vaulttransitkey"), name)
	}
	return obj.(*v1alpha1.VaultTransitKey), nil
}
