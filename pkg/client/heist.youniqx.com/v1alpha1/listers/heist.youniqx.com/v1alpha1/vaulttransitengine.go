/*
Copyright 2022 youniqx Identity AG.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/youniqx/heist/pkg/apis/heist.youniqx.com/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// VaultTransitEngineLister helps list VaultTransitEngines.
// All objects returned here must be treated as read-only.
type VaultTransitEngineLister interface {
	// List lists all VaultTransitEngines in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.VaultTransitEngine, err error)
	// VaultTransitEngines returns an object that can list and get VaultTransitEngines.
	VaultTransitEngines(namespace string) VaultTransitEngineNamespaceLister
	VaultTransitEngineListerExpansion
}

// vaultTransitEngineLister implements the VaultTransitEngineLister interface.
type vaultTransitEngineLister struct {
	indexer cache.Indexer
}

// NewVaultTransitEngineLister returns a new VaultTransitEngineLister.
func NewVaultTransitEngineLister(indexer cache.Indexer) VaultTransitEngineLister {
	return &vaultTransitEngineLister{indexer: indexer}
}

// List lists all VaultTransitEngines in the indexer.
func (s *vaultTransitEngineLister) List(selector labels.Selector) (ret []*v1alpha1.VaultTransitEngine, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.VaultTransitEngine))
	})
	return ret, err
}

// VaultTransitEngines returns an object that can list and get VaultTransitEngines.
func (s *vaultTransitEngineLister) VaultTransitEngines(namespace string) VaultTransitEngineNamespaceLister {
	return vaultTransitEngineNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// VaultTransitEngineNamespaceLister helps list and get VaultTransitEngines.
// All objects returned here must be treated as read-only.
type VaultTransitEngineNamespaceLister interface {
	// List lists all VaultTransitEngines in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.VaultTransitEngine, err error)
	// Get retrieves the VaultTransitEngine from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.VaultTransitEngine, error)
	VaultTransitEngineNamespaceListerExpansion
}

// vaultTransitEngineNamespaceLister implements the VaultTransitEngineNamespaceLister
// interface.
type vaultTransitEngineNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all VaultTransitEngines in the indexer for a given namespace.
func (s vaultTransitEngineNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.VaultTransitEngine, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.VaultTransitEngine))
	})
	return ret, err
}

// Get retrieves the VaultTransitEngine from the indexer for a given namespace and name.
func (s vaultTransitEngineNamespaceLister) Get(name string) (*v1alpha1.VaultTransitEngine, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("vaulttransitengine"), name)
	}
	return obj.(*v1alpha1.VaultTransitEngine), nil
}
