/*
Copyright 2022 youniqx Identity AG.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/youniqx/heist/pkg/apis/heist.youniqx.com/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// VaultBindingLister helps list VaultBindings.
// All objects returned here must be treated as read-only.
type VaultBindingLister interface {
	// List lists all VaultBindings in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.VaultBinding, err error)
	// VaultBindings returns an object that can list and get VaultBindings.
	VaultBindings(namespace string) VaultBindingNamespaceLister
	VaultBindingListerExpansion
}

// vaultBindingLister implements the VaultBindingLister interface.
type vaultBindingLister struct {
	indexer cache.Indexer
}

// NewVaultBindingLister returns a new VaultBindingLister.
func NewVaultBindingLister(indexer cache.Indexer) VaultBindingLister {
	return &vaultBindingLister{indexer: indexer}
}

// List lists all VaultBindings in the indexer.
func (s *vaultBindingLister) List(selector labels.Selector) (ret []*v1alpha1.VaultBinding, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.VaultBinding))
	})
	return ret, err
}

// VaultBindings returns an object that can list and get VaultBindings.
func (s *vaultBindingLister) VaultBindings(namespace string) VaultBindingNamespaceLister {
	return vaultBindingNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// VaultBindingNamespaceLister helps list and get VaultBindings.
// All objects returned here must be treated as read-only.
type VaultBindingNamespaceLister interface {
	// List lists all VaultBindings in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.VaultBinding, err error)
	// Get retrieves the VaultBinding from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.VaultBinding, error)
	VaultBindingNamespaceListerExpansion
}

// vaultBindingNamespaceLister implements the VaultBindingNamespaceLister
// interface.
type vaultBindingNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all VaultBindings in the indexer for a given namespace.
func (s vaultBindingNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.VaultBinding, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.VaultBinding))
	})
	return ret, err
}

// Get retrieves the VaultBinding from the indexer for a given namespace and name.
func (s vaultBindingNamespaceLister) Get(name string) (*v1alpha1.VaultBinding, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("vaultbinding"), name)
	}
	return obj.(*v1alpha1.VaultBinding), nil
}
