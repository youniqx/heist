/*
Copyright 2021.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package v1alpha1

import (
	"errors"
	"fmt"
	"regexp"
	"strings"

	"github.com/go-logr/logr"
	"k8s.io/apimachinery/pkg/runtime"
	ctrl "sigs.k8s.io/controller-runtime"
	logf "sigs.k8s.io/controller-runtime/pkg/log"
	"sigs.k8s.io/controller-runtime/pkg/webhook"
)

// log is for logging in this package.
var vaultkvsecretlog = logf.Log.WithName("vaultkvsecret-resource")

func (r *VaultKVSecret) SetupWebhookWithManager(mgr ctrl.Manager) error {
	return ctrl.NewWebhookManagedBy(mgr).
		For(r).
		Complete()
}

// EDIT THIS FILE!  THIS IS SCAFFOLDING FOR YOU TO OWN!

// TODO(user): change verbs to "verbs=create;update;delete" if you want to enable deletion validation.
// +kubebuilder:webhook:path=/validate-heist-youniqx-com-v1alpha1-vaultkvsecret,mutating=false,failurePolicy=fail,sideEffects=None,groups=heist.youniqx.com,resources=vaultkvsecrets,verbs=create;update;delete,versions=v1alpha1,name=vvaultkvsecret.heist.youniqx.com,admissionReviewVersions={v1,v1beta1}

var _ webhook.Validator = &VaultKVSecret{}

var cipherTextRegex = regexp.MustCompile("vault:([a-z0-9]+):(.+)")

// ValidateCreate implements webhook.Validator so a webhook will be registered for the type.
func (r *VaultKVSecret) ValidateCreate() error {
	log := vaultkvsecretlog.WithName("validate").WithValues(
		"action", "create",
		"namespace", r.Namespace,
		"name", r.Name,
	)
	log.Info("create validation started")

	return r.validate(log)
}

// ValidateUpdate implements webhook.Validator so a webhook will be registered for the type.
func (r *VaultKVSecret) ValidateUpdate(old runtime.Object) error {
	log := vaultkvsecretlog.WithName("validate").WithValues(
		"action", "update",
		"namespace", r.Namespace,
		"name", r.Name,
	)
	log.Info("update validation started")

	return r.validate(log)
}

// ValidateDelete implements webhook.Validator so a webhook will be registered for the type.
func (r *VaultKVSecret) ValidateDelete() error {
	log := vaultkvsecretlog.WithName("validate").WithValues(
		"action", "delete",
		"namespace", r.Namespace,
		"name", r.Name,
	)
	log.Info("delete validation started")

	if r.Spec.DeleteProtection {
		log.Info("rejecting change: resource has delete protection enabled. It cannot be deleted.")
		return errors.New("delete protection is enabled for this VaultKVSecret, it cannot be deleted")
	}

	return nil
}

func (r *VaultKVSecret) validate(log logr.Logger) error {
	if r.Spec.Engine == "" {
		log.Info("rejecting change: Required field engine is not set")
		return fmt.Errorf("required field engine is not set")
	}

	if len(r.Spec.Fields) == 0 {
		log.Info("rejecting change: At least one field has to be set in each VaultKVSecret")
		return fmt.Errorf("at least one field must be configured")
	}

	if strings.HasSuffix(r.Spec.Path, "/") {
		log.Info("rejecting change: Path field ends in a /")
		return fmt.Errorf("the Path parameter must not end in a slash")
	}

	if strings.HasPrefix(r.Spec.Path, "/") {
		log.Info("rejecting change: Path field starts with a /")
		return fmt.Errorf("the Path parameter must not start with a slash")
	}

	for key, config := range r.Spec.Fields {
		err := r.validateField(log, config, key)
		if err != nil {
			return err
		}
	}

	return nil
}

func (r *VaultKVSecret) validateField(log logr.Logger, config *VaultKVSecretField, key string) error {
	if config.AutoGenerated && config.CipherText != "" {
		log.Info("rejecting change: field has both a cipher text and the AutoGenerated flag set.", "field", key)
		return fmt.Errorf("field %s has both a cipher text value and the AutoGenerated flag set. That is not possible. Pick either an auto generated value or a fixed value", key)
	}

	if config.CipherText != "" {
		if !cipherTextRegex.MatchString(string(config.CipherText)) {
			log.Info("rejecting change: cipher text of field is in an invalid format", "field", key)
			return fmt.Errorf("field %s has cipher text in an invalid format", key)
		}

		if config.AutoGeneratedLength != 0 {
			log.Info("rejecting change: AutoGeneratedLength parameter is set but AutoGenerated flag is set to false", "field", key)
			return fmt.Errorf("field %s has the AutoGeneratedLength parameter set even though the AutoGenerated flag is set to false", key)
		}
		return nil
	}

	if config.AutoGenerated {
		if config.AutoGeneratedLength < 0 {
			log.Info("rejecting change: AutoGeneratedLength parameter is set to a negative value", "field", key)
			return fmt.Errorf("field %s has a negative value for auto generated length", key)
		}

		return nil
	}

	log.Info("rejecting change: Neither the AutoGenerated parameter nor the CipherText field is set", "field", key)
	return fmt.Errorf("field %s has neither the AutoGenerated flag or a CipherText set - you have to specify at least one", key)
}
